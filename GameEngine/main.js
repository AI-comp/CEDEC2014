// Generated by CoffeeScript 1.7.1
(function() {
  var CodePlayer, MAX_AI_TIME, MAX_AJAX_TIME, MAX_WAIT_TIME, WebAppPlayer, advance, advanceTurn, commands, context, createPlayer, currentPlayer, initialize, isFinished, isLiving, isStarting, normalize, players, start, time;

  MAX_AI_TIME = 10 * 1000;

  MAX_AJAX_TIME = MAX_AI_TIME + 1000 * 2;

  MAX_WAIT_TIME = MAX_AI_TIME + 1000;

  context = {};

  commands = [];

  players = [];

  time = null;

  isStarting = false;

  isLiving = false;

  CodePlayer = (function() {
    function CodePlayer(code, pid) {
      this.code = code;
      this.pid = pid;
      this.worker = new Worker('worker.js');
      this.result = null;
      this.worker.addEventListener('message', (function(_this) {
        return function(e) {
          switch (e.data.type) {
            case 'initialized':
              console.log("engine received initialized: " + JSON.stringify(e.data, null, 2));
              break;
            case 'advanced':
              console.log("engine received advanced: " + JSON.stringify(e.data, null, 2));
          }
          return _this.result = e.data;
        };
      })(this), false);
    }

    CodePlayer.prototype.start = function() {
      this.result = null;
      return this.worker.postMessage({
        type: 'initialize',
        code: this.code
      });
    };

    CodePlayer.prototype.advance = function(context) {
      this.result = null;
      return this.worker.postMessage({
        type: 'advance',
        context: context
      });
    };

    CodePlayer.prototype.terminate = function() {
      return this.worker.terminate();
    };

    return CodePlayer;

  })();

  WebAppPlayer = (function() {
    function WebAppPlayer(url, pid) {
      this.url = url;
      this.pid = pid;
      this.lags = [];
      this.sessionId = null;
      this.result = null;
      this.time = null;
    }

    WebAppPlayer.prototype.ajax = function(data) {
      console.log('ajax: ' + JSON.stringify(data, null, 2));
      return $.ajax({
        type: 'GET',
        url: this.url,
        data: data,
        dataType: 'jsonp',
        timeout: MAX_AJAX_TIME,
        jsonpCallback: 'jsonpCallback' + this.pid
      });
    };

    WebAppPlayer.prototype.start = function() {
      console.log('start');
      this.result = null;
      return this.ajax({
        type: 'start'
      }).then((function(_this) {
        return function(json) {
          _this.sessionId = json.sessionId;
          return _this.result = {};
        };
      })(this), (function(_this) {
        return function(json) {
          return _this.result = {};
        };
      })(this));
    };

    WebAppPlayer.prototype.advance = function(context) {
      this.result = null;
      return this.ping(context);
    };

    WebAppPlayer.prototype.ping = function(context) {
      this.time = new Date().getTime();
      return this.ajax({
        type: 'ping',
        sessionId: this.sessionId
      }).then((function(_this) {
        return function(json) {
          _this.lags.push(new Date().getTime() - _this.time);
          if (_this.lags.length > 10) {
            _this.lags.shift();
          }
          $('#time').text(JSON.stringify(_this.lags, null, 2));
          return _this.advanceBody(context);
        };
      })(this), (function(_this) {
        return function(json) {
          return _this.result = {};
        };
      })(this));
    };

    WebAppPlayer.prototype.advanceBody = function(context) {
      this.time = new Date().getTime();
      return this.ajax({
        type: 'advance',
        sessionId: this.sessionId,
        context: context
      }).then((function(_this) {
        return function(json) {
          _this.time = new Date().getTime() - _this.time;
          if (_this.lags.length > 0) {
            _this.time = _this.time - _this.lags.reduce(function(a, b) {
              return a + b;
            }) / _this.lags.length;
          }
          console.log('advance: ' + _this.time + ": " + JSON.stringify(json, null, 2));
          return _this.result = {
            command: json.command,
            time: _this.time
          };
        };
      })(this), (function(_this) {
        return function(json) {
          return _this.result = {};
        };
      })(this));
    };

    WebAppPlayer.prototype.terminate = function() {};

    return WebAppPlayer;

  })();

  $(function() {
    console.log('ready');
    return $('#start').click(function() {
      var player, _i, _len;
      if (!isStarting) {
        isStarting = true;
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          player = players[_i];
          player.terminate();
        }
        return start();
      }
    });
  });

  createPlayer = function(index) {
    if ($('input[name="ai' + index + '"]:checked').val() === 'url') {
      return new WebAppPlayer($('#url' + index).val(), index);
    } else {
      return new CodePlayer($('#code' + index).val(), index);
    }
  };

  isFinished = function() {
    var player, _i, _len;
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      player = players[_i];
      if (player.result === null) {
        return false;
      }
    }
    return true;
  };

  currentPlayer = function() {
    return players[context.playerIndex];
  };

  advanceTurn = function() {
    context.playerIndex = context.playerIndex + 1;
    if (context.playerIndex === players.length) {
      context.playerIndex = 0;
      context.turn = context.turn + 1;
    }
    time = new Date().getTime();
    return currentPlayer().advance(context);
  };

  start = function() {
    var i, _i;
    if (!isLiving) {
      console.log('start');
      $('#log').text('');
      $('#debug').text('');
      context = {
        turn: 1,
        playerIndex: -1,
        history: []
      };
      commands = [];
      players = [];
      for (i = _i = 0; _i < 2; i = ++_i) {
        players.push(createPlayer(i));
        players[i].start();
      }
      isLiving = true;
      isStarting = false;
      return initialize();
    } else {
      return setTimeout(function() {
        return start();
      }, 1000);
    }
  };

  initialize = function() {
    console.log('initialize');
    if (isFinished()) {
      advanceTurn();
      return advance();
    } else if (!isStarting) {
      return setTimeout(function() {
        return initialize();
      }, 1000);
    } else {
      isLiving = false;
      return console.log('terminate');
    }
  };

  normalize = function(command) {
    switch (command.toLowerCase()) {
      case 'scissor':
        return 'sc';
      case 'paper':
        return 'pa';
      case 'stone':
        return 'st';
      default:
        return 'un';
    }
  };

  advance = function() {
    var c1, c2, cmd, currentTime, ret, timeOver;
    currentTime = new Date().getTime();
    console.log('advance: ' + currentTime + ', ' + time + ', ' + (currentTime - time));
    timeOver = currentTime - time > MAX_WAIT_TIME;
    if (currentPlayer().result !== null || timeOver) {
      $('#debug').append('advance: ' + JSON.stringify(currentPlayer().result, null, 2) + '<br />');
      ret = currentPlayer().result;
      cmd = !timeOver && ret.time <= MAX_AI_TIME ? ret.command : '';
      commands.push(normalize(cmd));
      if (commands.length === players.length) {
        $('#debug').append('advance: ' + JSON.stringify(commands, null, 2) + '<br />');
        c1 = commands[0];
        c2 = commands[1];
        if ((c1 === 'sc' && c2 === 'pa') || (c1 === 'pa' && c2 === 'st') || (c1 === 'st' && c2 === 'sc') || (c1 !== 'un' && c2 === 'un')) {
          $('#log').append('Player 1 wins !');
        } else if ((c1 === 'sc' && c2 === 'st') || (c1 === 'pa' && c2 === 'sc') || (c1 === 'st' && c2 === 'pa') || (c1 === 'un' && c2 !== 'un')) {
          $('#log').append('Player 2 wins !');
        } else {
          $('#log').append('Draw !');
        }
        $('#log').append('<br>');
        context.history.push(commands);
        commands = [];
      }
      advanceTurn();
    }
    if (!isStarting && context.turn <= 5) {
      return setTimeout(function() {
        return advance();
      }, 1000);
    } else {
      isLiving = false;
      return console.log('terminate');
    }
  };

}).call(this);
